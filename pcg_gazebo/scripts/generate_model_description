#!/usr/bin/env python
# Copyright (c) 2019 - The Procedural Generation for Gazebo authors
# For information on the respective copyright owner see the NOTICE file
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
"""**Description**

Script that converts SDF-Jinja or URDF-Jinja templates into SDF or URDF robot
description.

**Input parameters**

* `include-dir` (*type:* `str`): Path to Jinja2 template includes folder
* `templates-dir` (*type:* `str`): Path to Jinja2 templates folder
* `param-file` (*type:* `str`, `optional`): YAML parameter file to be set in the model
* `param` (`optional`): Single parameters to be parsed in the Jinja2 templates as --param foo=1. Multiple `param` entries are accepted.
* `model-template` (*type:* `str`): Robot model file template
* `sdf`: Indicates that the templates will be used to generate a SDF robot description
* `urdf`: Indicates that the templates will be used to generate a URDF robot description
* `sdf-output-param` (*type:* `str`, *default:* `/robot_description_sdf`): Name of the ROS parameters to store the SDF robot description in case `--sdf` was provided
* `urdf-output-param` (*type:* `str`, *default:* `/robot_description`): Name of the ROS parameters to store the URDF robot description in case `--urdf` was provided
* `output-topic` (*type:* `str`, `optional`): Optional output topic to publish the resulting XML
* `output-filename` (*type:* `str`, `optional`): Optional output file to store the parsed file
* `spawn-sdf-model-srv` (*type:* `str`, `optional`): Service to be used to trigger the spawning of the SDF model

**Examples**

"""
from __future__ import print_function
import os
import argparse
import rospy
import subprocess
import sys
import re
import yaml
import rospkg
from time import time, sleep
from std_msgs.msg import String
from std_srvs.srv import Trigger
from pcg_gazebo.task_manager import GazeboProxy
from pcg_gazebo.parsers import parse_sdf, parse_urdf, process_template, \
    sdf2urdf, urdf2sdf


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Generate SDF model from Jinja2 template files')
    parser.add_argument(
        '--param-file', '-f', type=str, 
        help='YAML parameter file to be set in the model')
    parser.add_argument(
        '--param', '-p', action='append', 
        help='Model parameter to be replaced in the SDF file')
    parser.add_argument(
        '--model-template', '-m', type=str, 
        help='Robot model file template')
    parser.add_argument(
        '--sdf', action='store_true', 
        help='Flag to signal that the input template is for a SDF file')
    parser.add_argument(
        '--urdf', action='store_true')
    parser.add_argument(
        '--sdf-output-param', type=str, default='/robot_description_sdf', help='')
    parser.add_argument(
        '--urdf-output-param', type=str, default='/robot_description', help='')
    parser.add_argument(
        '--output-topic', type=str,
        help='Optional output topic to publish the resulting XML')
    parser.add_argument(
        '--output-filename', '-o', type=str,
        help='Output file to store the parsed file')
    parser.add_argument(
        '--spawn-sdf-model-srv', type=str,
        help='Service to be used to trigger the spawning of the SDF model')
    parser.add_argument(
        '--spawn', action='store_true')
    parser.add_argument(
        '--robot-namespace', type=str, default='robot', help='')
    parser.add_argument(
        '--x',
        type=float,
        default=0.0,
        help='X coordinate of the spawning position in meters')
    parser.add_argument(
        '--y',
        type=float,
        default=0.0,
        help='Y coordinate of the spawning position in meters')
    parser.add_argument(
        '--z',
        type=float,
        default=0.0,
        help='Z coordinate of the spawning position in meters')
    parser.add_argument(
        '--roll',
        type=float,
        default=0.0,
        help='Roll angle of the spawning position in radians')
    parser.add_argument(
        '--pitch',
        type=float,
        default=0.0,
        help='Pitch angle of the spawning position in radians')
    parser.add_argument(
        '--yaw',
        type=float,
        default=0.0,
        help='Yaw angle of the spawning position in radians')
    args = parser.parse_args(rospy.myargv()[1:])

    assert os.path.isfile(args.model_template), \
        'Invalid model template file, value={}'.format(args.model_template)
    
    if rospy.is_shutdown():
            raise rospy.ROSInitException('ROS master is not running!')

    rospy.init_node('generate_model_description', anonymous=True)

    if not args.sdf and not args.urdf:
        rospy.logerr('Neither the --sdf nor the --urdf flags were set')
        sys.exit(-1)

    params = dict()
    
    if os.path.isfile(args.param_file):
        rospy.loginfo('Importing parameters from file: {}'.format(args.param_file))
        with open(args.param_file, 'r') as p_file:
            params = yaml.load(p_file)
        rospy.loginfo('Parameters for Jinja template loaded')
        for tag in params:
            rospy.loginfo('\t {}={}'.format(tag, params[tag]))
    if args.param:
        if len(args.param):
            for item in args.param:
                param = item.split('=')
                assert len(param) == 2, 'Parameter must be provided as <param_name>=<param_value>'
                params[param[0]] = param[1]
                rospy.loginfo('Jinja input parameter: {}={}'.format(param[0], param[1]))

    output_xml = process_template(args.model_template, parameters=params) 
    
    if args.sdf:                
        rospy.loginfo('Parsing the SDF template: {}'.format(args.model_template))
        sdf = parse_sdf(output_xml)
        urdf = sdf2urdf(sdf.models[0])
                    
        if args.output_filename:
            sdf.export_xml(args.output_filename)
            urdf.export_xml(args.output_filename.replace('.sdf', '.urdf'))
            rospy.loginfo('SDF file exported to: {}'.format(args.output_filename))
            rospy.loginfo('URDF file exported to: {}'.format(args.output_filename.replace('.sdf', '.urdf')))
    elif args.urdf:
        rospy.loginfo('Parsing the URDF template: {}'.format(args.model_template))
        urdf = parse_urdf(output_xml)
        sdf = urdf2sdf(urdf)
        
        if args.output_filename:
            # Export file
            urdf.export_xml(args.output_filename)
            sdf.export_xml(args.output_filename.replace('.urdf', '.sdf'))
            rospy.loginfo('SDF file exported to: {}'.format(args.output_filename.replace('.urdf', '.sdf')))
            rospy.loginfo('URDF file exported to: {}'.format(args.output_filename))
    else:
        sys.exit()

    if args.sdf_output_param is not None and len(args.sdf_output_param) > 0:
        # Publish SDF robot description
        rospy.set_param(args.sdf_output_param, sdf.to_xml_as_str())
        rospy.loginfo('SDF stored in {}'.format(args.sdf_output_param))
    
    if args.urdf_output_param is not None and len(args.urdf_output_param) > 0:
        # Convert file to URDF
        rospy.set_param(args.urdf_output_param, urdf.to_xml_as_str())     
        rospy.loginfo('URDF stored in {}'.format(args.urdf_output_param))       

    if args.sdf and args.spawn:
        rospy.loginfo('Spawning the SDF model to Gazebo')
        gazebo_proxy = GazeboProxy()

        success = gazebo_proxy.spawn_sdf_model(
            args.robot_namespace,
            sdf.to_xml_as_str(),
            [args.x, args.y, args.z],
            [args.roll, args.pitch, args.yaw])

    if args.output_topic:      
        rospy.loginfo('Output topic: ' + args.output_topic)
        pub = rospy.Publisher(args.output_topic, String, queue_size=1)
        
        start_time = time()
        # Wait for 30 seconds until another node is subscribed
        while pub.get_num_connections() == 0 and time() - start_time < 30:
            sleep(0.1)
        pub.publish(output_xml)

    if args.sdf and args.spawn_sdf_model_srv:        
        try:
            rospy.wait_for_service(args.spawn_sdf_model_srv, timeout=30)

            spawn_sdf_model = rospy.ServiceProxy(args.spawn_sdf_model_srv, Trigger)

            output = spawn_sdf_model()

            if output.success:
                rospy.loginfo('SDF model was spawned')
            else:
                rospy.loginfo('Failed to spawn model')
        except rospy.ROSException as ex:
            rospy.logerr('Could not connect to service: {}'.format(args.spawn_sdf_model_srv))




    