#!/usr/bin/env python
# Copyright (c) 2019 - The Procedural Generation for Gazebo authors
# For information on the respective copyright owner see the NOTICE file
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import rospy
from pcg_gazebo.simulation.control import JointStateManagerClient
import argparse
import random
from time import time


if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument(
        '--namespace', 
        type=str, 
        default='pcg',
        help='PCG server namespace')
    parser.add_argument(
        '--model-names', 
        nargs='+', 
        type=str, 
        help='Names of the models to have its joint states changed')
        
    args = parser.parse_args()
    
    rospy.init_node('get_list_of_joints')

    if args.model_names is None:
        rospy.loginfo(
            'No model names provided, changing the state of '
            'all joints in the simulation')

    if args.namespace:
        ros_namespace = args.namespace
    else:
        ros_namespace = rospy.get_namespace()

    rospy.loginfo('PCG namespace=' + ros_namespace)

    # Create an instance of the joint state manager client
    client = JointStateManagerClient.get_instance()
    client.init(ros_namespace)
    
    # Initializing seed
    random.seed(time())

    # Iterate through the models and joints and change their
    # states randomly
    joints_data = client.get_joints()
    for model in joints_data:
        if args.model_names is not None:
            if model not in args.model_names:
                continue
        rospy.loginfo('Model: {}'.format(model))
        
        for joint in joints_data[model]:
            rospy.loginfo('\t - {}'.format(joint))
            client.set_random_joint_positions(model, joint)
            


            

