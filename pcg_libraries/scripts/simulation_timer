#!/usr/bin/env python
# Copyright (c) 2019 - The Procedural Generation for Gazebo authors
# For information on the respective copyright owner see the NOTICE file
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

from __future__ import print_function
import rospy
import sys
import argparse
from time import time, sleep
from rosgraph_msgs.msg import Clock


CLOCK_TIME = 0


def clock_callback(msg):
    global CLOCK_TIME
    CLOCK_TIME = rospy.Time(secs=msg.clock.secs, nsecs=msg.clock.nsecs).to_sec()


def main():
    parser = argparse.ArgumentParser(description="Simulation timer")
    parser.add_argument('--timeout', '-t', type=float, help='Timeout in seconds')
    args = parser.parse_args(rospy.myargv()[1:])
    rospy.loginfo('Simulation timer')

    if rospy.is_shutdown():
        ros_timeout = 30
        start_ros_timeout = time()
        while time() - start_ros_timeout < ros_timeout and rospy.is_shutdown():
            rospy.loginfo('Waiting for ROS master...')
            sleep(0.1)
        if rospy.is_shutdown():
            raise rospy.ROSException('ROS master is not running!')

    rospy.init_node('simulation_timer', anonymous=True)

    sub = rospy.Subscriber('clock', Clock, clock_callback)

    timeout = args.timeout
    if args.timeout is None:
        rospy.loginfo('No timeout provided')
        return

    if args.timeout < 0:
        raise rospy.ROSException('Termination time must be a positive floating point value')

    rospy.loginfo('Starting simulation timer - Timeout = %2.f s' % timeout)
    rate = rospy.Rate(100)

    start_process_timeout = time()

    while CLOCK_TIME < timeout:
        rate.sleep()
        if CLOCK_TIME == 0:
            if time() - start_process_timeout > 60:
                rospy.logerr('Clock was not initialized for 60 seconds')
                break
        if rospy.is_shutdown():
            rospy.logerr('ROS master was killed!')
            break

    rospy.loginfo('Simulation timeout!')


if __name__ == '__main__':
    main()
    sys.exit(0)
